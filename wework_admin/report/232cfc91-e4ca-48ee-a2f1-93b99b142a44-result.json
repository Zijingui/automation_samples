{"name": "冒烟测试：正常添加标签", "status": "broken", "statusDetails": {"message": "Exception", "trace": "args = (<pages.contact_page.ContactPage object at 0x00000125FB5999D0>, 'xpath', \"//ul[@class='member_tag_list']/li[text()='张娟 ']//a\"), kwargs = {}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7d2b38fb6e71cc4eacb6c4380720f12\")>\nnow = datetime.datetime(2022, 11, 28, 21, 32, 50, 411019), time_stamp = '2022-11-28_21-32-50'\nscreenshot_path = '../screenshots/image_2022-11-28_21-32-50.png', page_source_path = '../log/page_source_2022-11-28_21-32-50.html'\nf = <_io.TextIOWrapper name='../log/page_source_2022-11-28_21-32-50.html' mode='w' encoding='utf8'>\n\n    def inner(*args, **kwargs):\n        driver = args[0].driver\n    \n        try:\n>           return func(*args, **kwargs)\n\n..\\utils\\ui_exception_utils.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.contact_page.ContactPage object at 0x00000125FB5999D0>, by = 'xpath', value = \"//ul[@class='member_tag_list']/li[text()='张娟 ']//a\"\n\n    @ui_exception_record\n    def do_click(self, by, value=None):\n        '''点击元素'''\n        self.logger.info(f\"点击元素：{by} {value}\")\n        if value:\n>           self.do_find(by, value).click()\n\n..\\pages\\base_page.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"e7d2b38fb6e71cc4eacb6c4380720f12\", element=\"50018c43-838c-4df5-afa1-b2458196c82d\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"e7d2b38fb6e71cc4eacb6c4380720f12\", element=\"50018c43-838c-4df5-afa1-b2458196c82d\")>\ncommand = 'clickElement', params = {'id': '50018c43-838c-4df5-afa1-b2458196c82d'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7d2b38fb6e71cc4eacb6c4380720f12\")>, driver_command = 'clickElement'\nparams = {'id': '50018c43-838c-4df5-afa1-b2458196c82d'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000125FAE3B4C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...unk [0x763E6939+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77198FD2+1218]\\\\n\\\\tRtlGetFullPathName_UEx [0x77198F9D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=107.0.5304.107)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00DF1ED3+2236115]\nE       \tOrdinal0 [0x00D892F1+1807089]\nE       \tOrdinal0 [0x00C965C0+812480]\nE       \tOrdinal0 [0x00CC6586+1009030]\nE       \tOrdinal0 [0x00CBC416+967702]\nE       \tOrdinal0 [0x00CE1A8C+1120908]\nE       \tOrdinal0 [0x00CBBD84+966020]\nE       \tOrdinal0 [0x00CE1CA4+1121444]\nE       \tOrdinal0 [0x00CF59E2+1202658]\nE       \tOrdinal0 [0x00CE18A6+1120422]\nE       \tOrdinal0 [0x00CBA73D+960317]\nE       \tOrdinal0 [0x00CBB71F+964383]\nE       \tGetHandleVerifier [0x0109E7E2+2743074]\nE       \tGetHandleVerifier [0x010908D4+2685972]\nE       \tGetHandleVerifier [0x00E82BAA+532202]\nE       \tGetHandleVerifier [0x00E81990+527568]\nE       \tOrdinal0 [0x00D9080C+1837068]\nE       \tOrdinal0 [0x00D94CD8+1854680]\nE       \tOrdinal0 [0x00D94DC5+1854917]\nE       \tOrdinal0 [0x00D9ED64+1895780]\nE       \tBaseThreadInitThunk [0x763E6939+25]\nE       \tRtlGetFullPathName_UEx [0x77198FD2+1218]\nE       \tRtlGetFullPathName_UEx [0x77198F9D+1165]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_tags.TestTags object at 0x00000125FB375850>\n\n    @allure.feature(\"标签管理\")\n    @allure.story(\"添加标签\")\n    @allure.title(\"冒烟测试：正常添加标签\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    def test_add_tags(self):\n        '''测试新建标签'''\n        res = self.index.goto_contact_page().goto_add_tag(\n        ).edit_tag_info(self.tag_name).get_tips()\n    \n        # 断言\n        self.logger.debug(f\"断言创建标签: {self.tag_name}\")\n        assert res == \"创建成功\"\n    \n>       self.index.goto_contact_page().delete_tag(self.tag_name)\n\ntest_tags.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\pages\\contact_page.py:181: in delete_tag\n    self.do_click(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<pages.contact_page.ContactPage object at 0x00000125FB5999D0>, 'xpath', \"//ul[@class='member_tag_list']/li[text()='张娟 ']//a\"), kwargs = {}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7d2b38fb6e71cc4eacb6c4380720f12\")>\nnow = datetime.datetime(2022, 11, 28, 21, 32, 50, 411019), time_stamp = '2022-11-28_21-32-50'\nscreenshot_path = '../screenshots/image_2022-11-28_21-32-50.png', page_source_path = '../log/page_source_2022-11-28_21-32-50.html'\nf = <_io.TextIOWrapper name='../log/page_source_2022-11-28_21-32-50.html' mode='w' encoding='utf8'>\n\n    def inner(*args, **kwargs):\n        driver = args[0].driver\n    \n        try:\n            return func(*args, **kwargs)\n    \n        except Exception:\n            now = datetime.datetime.now()\n            time_stamp = now.strftime(\"%Y-%m-%d_%H-%M-%S\")\n    \n            # 截图文件存储路径\n            screenshot_path = f'../screenshots/image_{time_stamp}.png'\n            # page source文件存储路径\n            page_source_path = f\"../log/page_source_{time_stamp}.html\"\n    \n            # 截图\n            driver.save_screenshot(screenshot_path)\n    \n            # 记录 page_source\n            with open(page_source_path, \"w\", encoding=\"utf8\") as f:\n                f.write(driver.page_source)\n    \n            # 将截图和page source记录到allure报告中\n            allure.attach.file(screenshot_path, name=\"picture\",\n                               attachment_type=allure.attachment_type.PNG)\n    \n            allure.attach.file(page_source_path, name=\"page_source\",\n                               attachment_type=allure.attachment_type.TEXT)\n    \n>           raise Exception\nE           Exception\n\n..\\utils\\ui_exception_utils.py:35: Exception"}, "description": "测试新建标签", "steps": [{"name": "点击通讯录", "status": "passed", "start": 1669642361430, "stop": 1669642361479}, {"name": "点击添加标签", "status": "passed", "start": 1669642361490, "stop": 1669642365805}, {"name": "输入标签信息：张娟", "status": "passed", "start": 1669642365815, "stop": 1669642365888}, {"name": "点击确定", "status": "passed", "start": 1669642365888, "stop": 1669642365944}, {"name": "点击通讯录", "status": "passed", "start": 1669642366976, "stop": 1669642367025}, {"name": "点击标签tab", "status": "passed", "start": 1669642367056, "stop": 1669642367117}, {"name": "选择要删除的标签：张娟", "status": "broken", "statusDetails": {"message": "Exception\n", "trace": "  File \"D:\\hogwarts_course\\python_projects\\wework_admin\\pages\\contact_page.py\", line 181, in delete_tag\n    self.do_click(\n  File \"D:\\hogwarts_course\\python_projects\\wework_admin\\utils\\ui_exception_utils.py\", line 35, in inner\n    raise Exception\n"}, "attachments": [{"name": "picture", "source": "1e1bccbd-8ff3-4e0c-89e4-edcc45fbaf80-attachment.png", "type": "image/png"}, {"name": "page_source", "source": "871b2637-f1d4-4b63-b7f1-e1cc313d4a0f-attachment.txt", "type": "text/plain"}], "start": 1669642367117, "stop": 1669642370583}], "attachments": [{"name": "log", "source": "fe29c289-3da5-4a8e-bb4f-c4b9d63c5217-attachment.txt", "type": "text/plain"}], "start": 1669642361430, "stop": 1669642370599, "uuid": "05622dca-5d6f-4a0c-92d5-f2a64de7e79a", "historyId": "e5b9e4672f9fc6431700e81aa80798b1", "testCaseId": "ca258f50cdc2287c83ec8fb8ca07da3a", "fullName": "test_tags.TestTags#test_add_tags", "labels": [{"name": "story", "value": "添加标签"}, {"name": "feature", "value": "标签管理"}, {"name": "severity", "value": "blocker"}, {"name": "suite", "value": "test_tags"}, {"name": "subSuite", "value": "TestTags"}, {"name": "host", "value": "子衿-Zijin"}, {"name": "thread", "value": "10472-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_tags"}]}